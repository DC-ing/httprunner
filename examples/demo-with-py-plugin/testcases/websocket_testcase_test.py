# NOTE: Generated By HttpRunner v4.3.5
# FROM: testcases/websocket_testcase.yml
from httprunner import HttpRunner, Config, Step
from httprunner import (
    RunWebsocketRequest,
)


class TestCaseWebsocketTestcase(HttpRunner):

    config = (
        Config("run request with WebSocket protocol")
        .variables(
            **{
                "a": 12.3,
                "b": 3.45,
                "file": "data/demo_file_load_ws_message.txt",
                "n": 5,
            }
        )
        .base_url("ws://echo.websocket.events")
    )

    teststeps = [
        Step(
            RunWebsocketRequest("open connection")
            .open_connection("/")
            .with_headers(**{"User-Agent": "HttpRunnerPlus"})
            .validate()
            .assert_equal("status_code", 101)
            .assert_equal("headers.connection", "Upgrade")
        ),
        Step(RunWebsocketRequest("ping pong test").ping_pong("/").with_timeout(5000)),
        Step(
            RunWebsocketRequest("read sponsor info")
            .read("/")
            .with_timeout(5000)
            .validate()
            .assert_contains("body", "Lob.com")
        ),
        Step(
            RunWebsocketRequest("write json")
            .write("/")
            .with_text({"foo1": "${gen_random_string($n)}", "foo2": "${max($a, $b)}"})
        ),
        Step(
            RunWebsocketRequest("read json")
            .read("/")
            .extract()
            .with_jmespath("body.foo1", "varFoo1")
            .validate()
            .assert_length_equal("body.foo1", 5)
            .assert_equal("body.foo2", 12.3)
            .assert_string_equals("body.foo2", "12.3")
        ),
        Step(
            RunWebsocketRequest("write and read text")
            .write_and_read("/")
            .with_text("$varFoo1")
            .validate()
            .assert_length_equal("body", 5)
        ),
        Step(
            RunWebsocketRequest("write and read text 2")
            .write_and_read("/")
            .with_text(33)
            .validate()
            .assert_equal("body", 33)
        ),
        Step(
            RunWebsocketRequest("write and read binary file")
            .write_and_read("/")
            .with_binary("${load_ws_message($file)}")
            .validate()
            .assert_string_equals(
                "body", "demo file used for testing load_ws_message function"
            )
        ),
        Step(
            RunWebsocketRequest("write something redundant")
            .write("/")
            .with_text("have a nice day!")
        ),
        Step(
            RunWebsocketRequest("write something redundant")
            .write("/")
            .with_text("balabala ...")
        ),
        Step(
            RunWebsocketRequest("close connection")
            .close_connection("/")
            .with_timeout(30000)
            .with_close_status(1000)
            .validate()
            .assert_equal("status_code", 1000)
        ),
    ]


if __name__ == "__main__":
    TestCaseWebsocketTestcase().test_start()
