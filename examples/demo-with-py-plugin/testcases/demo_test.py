# NOTE: Generated By HttpRunner v4.3.0
# FROM: testcases/demo.json
from httprunner import HttpRunner, Config, Step, RunRequest


class TestCaseDemo(HttpRunner):

    config = (
        Config("demo with complex mechanisms")
        .variables(
            **{
                "a": "${sum(10, 2.3)}",
                "b": 3.45,
                "n": "${sum_ints(1, 2, 2)}",
                "varFoo1": "${gen_random_string($n)}",
                "varFoo2": "${max($a, $b)}",
            }
        )
        .base_url("https://postman-echo.com")
    )

    teststeps = [
        Step(
            RunRequest("get with params")
            .with_variables(
                **{
                    "b": 34.5,
                    "n": 3,
                    "name": "get with params",
                    "varFoo2": "${max($a, $b)}",
                }
            )
            .setup_hook("${setup_hook_example($name)}")
            .get("/get")
            .with_params(**{"foo1": "$varFoo1", "foo2": "$varFoo2"})
            .with_headers(**{"User-Agent": "HttpRunnerPlus"})
            .teardown_hook("${teardown_hook_example($name)}")
            .extract()
            .with_jmespath("body.args.foo1", "varFoo1")
            .validate()
            .assert_equal("status_code", 200, "check response status code")
            .assert_startswith('headers."Content-Type"', "application/json")
            .assert_length_equal("body.args.foo1", 5, "check args foo1")
            .assert_length_equal("$varFoo1", 5, "check args foo1")
            .assert_equal("body.args.foo2", "34.5", "check args foo2")
        ),
        Step(
            RunRequest("post json data")
            .post("/post")
            .with_data({"foo1": "$varFoo1", "foo2": "${max($a, $b)}"})
            .validate()
            .assert_equal("status_code", 200, "check status code")
            .assert_length_equal("body.json.foo1", 5, "check args foo1")
            .assert_equal("body.json.foo2", 12.3, "check args foo2")
        ),
        Step(
            RunRequest("post form data")
            .post("/post")
            .with_headers(
                **{"Content-Type": "application/x-www-form-urlencoded; charset=UTF-8"}
            )
            .with_data(
                {
                    "foo1": "$varFoo1",
                    "foo2": "${max($a, $b)}",
                    "time": "${get_timestamp()}",
                }
            )
            .extract()
            .with_jmespath("body.form.time", "varTime")
            .validate()
            .assert_equal("status_code", 200, "check status code")
            .assert_length_equal("body.form.foo1", 5, "check args foo1")
            .assert_equal("body.form.foo2", "12.3", "check args foo2")
        ),
        Step(
            RunRequest("get with timestamp")
            .get("/get")
            .with_params(**{"time": "$varTime"})
            .validate()
            .assert_length_equal("body.args.time", 13, "check extracted var timestamp")
        ),
    ]


if __name__ == "__main__":
    TestCaseDemo().test_start()
